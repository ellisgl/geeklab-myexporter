{% extends "Wrapper.html.twig" %}
{% block styles %}
{% endblock %}
{% block content %}
    <main>
        <div class="container bg-dark text-white">
            <header class="d-flex flex-wrap justify-content-center py-3 mb-4">
                <form class="d-flex mb-3 mb-md-0 me-md-auto col-4">
                    <select class="form-select" id="database" aria-label="Database Selector">
                        <option value="" selected>Open this select menu</option>
                        {% for database in databases %}
                            <option id="{{ database }}">{{ database }}</option>
                        {% endfor %}
                    </select>
                </form>
                <div class="text-end">
                    <button type="button" class="btn btn-warning">Logout</button>
                </div>
            </header>
        </div>
        <div class="container">
            <table id="table-table" class="sortable table">
                <thead>
                    <tr>
                        <th scope="col" class="text-start">Table Name</th>
                        <th scope="col" class="size-col">Size</th>
                        <th scope="col" class="checkbox-col no-sort">Schema</th>
                        <th scope="col" class="checkbox-col no-sort">Data</th>
                    </tr>
                </thead>
                <tbody>

                </tbody>
            </table>
        </div>
    </main>
{% endblock %}
{% block js %}
    <script src="/assets/sortable/sortable.min.js"></script>
    <script>
        const databaseSelect = document.getElementById('database');
        const tableBody = document.getElementById('table-table').getElementsByTagName('tbody')[0];

        function clearRows(tableBody) {
            tableBody.innerHTML = '';
        }

        /**
         * Convert bytes into human readable units.
         * Stolen from: https://gist.github.com/lanqy/5193417#gistcomment-3874119
         *
         * @param bytes
         * @returns {string}
         */
        function bytesToSize(bytes) {
            const units = ['byte', 'kilobyte', 'megabyte', 'terabyte', 'petabyte'];
            const unit = Math.floor(Math.log(bytes) / Math.log(1024));

            return new Intl.NumberFormat('en', {style: 'unit', unit: units[unit]}).format(bytes / 1024 ** unit);
        }

        /**
         * Add a table row.
         *
         * @param tableBody
         * @param tableData
         */
        function createRow(tableBody, tableData) {
            const size = bytesToSize(tableData.size)
            const row = tableBody.insertRow();
            const tableNameCell = row.insertCell();
            tableNameCell.innerHTML = `${tableData.name}`;

            const tableSizeCell = row.insertCell();
            tableSizeCell.setAttribute('data-sort', `${tableData.size}`);
            tableSizeCell.innerHTML = size;

            const schemaCell = row.insertCell();
            schemaCell.innerHTML = `<input class="form-check-input" type="checkbox" name="schema['${tableData.name}']" value="1" title="${tableData.name} schema" checked="checked">`;

            const dataCell = row.insertCell();
            dataCell.innerHTML = `<input class="form-check-input" type="checkbox" name="data['${tableData.name}']" value="1" title="${tableData.name} data" checked="checked">`;
        }

        // Attach a listener to the dropdown.
        databaseSelect.addEventListener('change', () => {
            const val = databaseSelect.value;
            clearRows(tableBody);

            if (val !== '') {
                fetch(`/db/${val}`)
                    .then(res => res.json())
                    .then((tables) => {
                        for (const key in tables) {
                            createRow(tableBody, tables[key]);
                        }
                    });
            }
        });
    </script>
{% endblock %}
